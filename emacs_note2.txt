;;;;;;;;;;;;;;;;;;;;;; elisp示例
;; scratch buffer默认开启 lisp-interaction-mode (major mode)
;; C-x C-e 执行eval-last-sexp
;; eval-buffer

(setq my-name "zilongshanren")
(message my-name)


(defun my-func()
       (interactive)
       (message "hello, %s" my-name)
)

(my-func)

(global-set-key (kbd "<f2>") 'my-func)


;;;;;;;;;;;;;;;;;;;;;; org-mode中编辑代码块, 按 C-c ' 编辑和跳回
<s + tag 自动生成代码块标签
#+BEGIN_SRC emacs-lisp
	;; cl - Common Lisp Extension
    (require 'cl)
#+END_SRC

;;;;;;;; 文学编程
(require 'org-install)
(require 'ob-tangle)
(org-babel-load-file (expand-file-name "zilongshanren.org" user-emacs-directory))

;; 光标放在最后一行后面，用M-RET会自动修正序号

;; todo
C-c C-t		

;; agenda
C-c a
C-c a a
C-c C-s     schedule item
C-c C-d     set deadline of item
C-c C-e     export
C-c C-o     用浏览器打开链接


;;;; ivy自动补全有时候出问题，使用 C-M-j 就立即生成你输入的内容，或者在想要创建的目录后面加一个 / 就解决了

package-list-packages

;; 通过 M-x customize-group 来配置制定模式的参数

;; M-x info -> emacs lisp intro



;;;;;;;;;;; autoload
1.magic string ;;;###
update-directory-autoloads
2.(autoload 'func-name "file-name")



byte-compile-file

;;;;;;;;;;;; major mode
;; text-mode/special-mode/prog-mode
;; xxx-mode/xxx-mode-key-map/xxx-mode-hook

;;;;;;;;;;;; dired
C-x d
(setq dired-recursive-deletes 'always)
(setq dired-recursive-copies 'always)
;; 进入目录不新开buffer,配合RET重绑定使用，用with-eval-after-load替代require
(put 'dired-find-alternate-file 'disable nil) 
;;(require 'dired)
;;(define-key dired-mode-map (kbd "RET") 'dired-find-alternate-file)
;;;; 延迟定义，加载了dired之后再绑定，避免绑定
(with-eval-after-load 'dired
    (define-key dired-mode-map (kbd "RET") 'dired-find-alternate-file)
)
(require 'dired-x) ;; => C-x C-j
(setq dired-dwim-target t) ;; 多dired buffer之间复制
^(shift+6)  回到上级目录
C-x C-q     编辑dired buffer



;; occur mode 搜索, C-g 关闭窗口(光标在其他窗口也可生效), q(光标需要在pop-up窗口)
M-s o   
;; occur-edit-mode, C-c C-c退出编辑模式
e


;; imenu，列出当前buffer的函数列表
imenu
counsel-imenu

;; iedit 
C-;


C-c . 插入日期, alt+h/j/k/l来移动日期
